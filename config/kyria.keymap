/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define L_BAS 0
#define L_NAV 1
#define L_CON 2
#define L_NUM 3
#define L_SYM 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
// dummy comment
&lt { quick-tap-ms = <150>; };

/ {
    combos {
        compatible = "zmk,combos";

        med_mo {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&mo L_CON>;
        };

        fn_mo {
            timeout-ms = <50>;
            key-positions = <46 47>;
            bindings = <&mo L_CON>;
        };

    };

    td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp N2>, <&kp N3>;
        };

    behaviors {
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12>;    // <---[[right-hand keys]]
        };
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5>;    // <---[[right-hand keys]]
        };
        // hm: homerow_mods {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "homerow mods";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <150>;
        //     quick-tap-ms = <0>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

            // default layout for reference
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  CAPS |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | L-CTRL  | L-ALT  | L-CMD  |  SPACE  |   CAPS   |  |   RET   |  SPACE  | BSPC  | BSPC  | R-ALT |

            //                &trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
            //                &trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
            //                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            //                                     &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans

        default_layer {
            label="Base";
            bindings = <
                &kp GRAVE             &kp Q           &kp W          &kp E          &kp R                 &kp T                                                    &kp Y         &kp U                 &kp I          &kp O          &kp P              &kp BSLH
                &mt LS(LA(LCTRL)) ESC &lh_pht LCTRL A &lh_pht LALT S &lh_pht LGUI D &lh_pht LSHFT F       &kp G                                                    &kp H         &rh_pht LSHFT J       &rh_pht LGUI K &rh_pht LALT L &rh_pht LCTRL SEMI &kp SQT
                &kp LS                &kp Z           &kp X          &kp C          &kp V                 &kp B           &none         &none &none &none          &kp N         &kp M                 &kp COMMA      &kp DOT        &kp FSLH           &none
                                                                     &none          &mt LS(LA(LCTRL)) ESC &lt L_NAV SPACE &lt L_NUM TAB &none &none &lt L_NUM BSPC &lt L_SYM RET &mt LS(LA(LCTRL)) ESC &none
            >;
        };

        nav_layer {
            label="Nav";
            bindings = <
                &trans &trans &trans &trans &trans &trans                             &trans &trans   &trans    &kp DEL   &kp BSPC  &trans
                &trans &trans &trans &trans &trans &trans                             &trans &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans
                                     &trans &trans &trans &trans &trans &trans &trans &trans &trans   &trans
            >;
        };

        con_layer {
            label="Con";
            bindings = <
                &trans &trans &trans &trans &trans &trans                             &trans        &bt BT_CLR   &trans       &trans       &trans       &trans
                &trans &trans &trans &trans &trans &trans                             &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans
                &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans        &trans       &trans       &trans       &trans       &trans
                                     &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            >;
        };

        num_layer {
            label="Num";
            bindings = <
                &trans &kp F7       &kp F8      &kp F9      &kp F12       &trans                             &kp KP_SLASH &kp N7       &kp N8      &kp N9      &kp MINUS      &trans
                &trans &hm LCTRL F4 &hm LALT F5 &hm LGUI F6 &hm LSHFT F11 &trans                             &kp N0       &hm LSHFT N4 &hm LGUI N5 &hm LALT N6 &hm LCTRL PLUS &trans
                &trans &kp F1       &kp F2      &kp F3      &kp F10       &trans &trans &trans &trans &trans &kp ASTERISK &kp N1       &kp N2      &kp N3      &kp DOT        &trans
                                                &trans      &trans        &trans &trans &trans &trans &trans &trans       &trans       &trans
            >;
        };

        symbol_layer {
                // ------------------------------------------------------------------------------------------------------------------
                // |   |  ~  |  +  |  *   |  %   |  \   |                              |  '   |  #    |       |  @   |       |      |
                // |   |  |  |  {  |  }   |  -   |  /   |                              |  `   |  ?    |  [    |  ]   |   ;   |      |
                // |   |     |     |      |      |      |      |      |  |      |      |  =   |  &    |  (    |  )   |   _   |      |
            label="Sym";
            bindings = <
                &trans &kp TILDE      &kp PLUS      &kp STAR      &kp PRCNT       &kp BSLH                             &kp SQT   &kp DQT         &kp HASH      &kp AT        &trans         &trans
                &trans &hm LCTRL PIPE &hm LALT LBRC &hm LGUI RBRC &hm LSHFT MINUS &kp FSLH                             &kp GRAVE &hm LSHFT QMARK &hm LGUI LBKT &hm LALT RBKT &hm LCTRL SEMI &trans
                &trans &trans         &trans        &trans        &trans          &trans   &trans &trans &trans &trans &kp EQUAL &kp AMPS        &kp LPAR      &kp RPAR      &kp UNDER      &trans
                                                    &trans        &trans          &trans   &trans &trans &trans &trans &trans    &trans          &trans
            >;
        };
    };
};